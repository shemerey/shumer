priority -10


snippet : ":key => :value" i
${1:key}: ${0:value}
endsnippet

snippet def "def <name>..." b
def ${1:function_name}${2:(${3:*args})}
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet defs "def <name>..." b
def self.${1:function_name}${2:(${3:*args})}
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "defmm?" "def method_missing..." br
def method_missing(${1:method_name}, ${2:*args}, &blk)
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet defr "def <name> ... rescue ..." b
def ${1:function_name}${2:(${3:*args})}
	${0:${VISUAL:# TODO}}
rescue
	${0:# TODO}
end
endsnippet

snippet defi "def initialize ..." b
def initialize${1:(${2:*args})}
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet alias "alias :<new_name> :<old_name>" b
alias :${1:new_name} :${2:old_name}
endsnippet

snippet alias "alias_method :<new_name>, :<old_name>" b
alias_method :${1:new_name}, :${2:old_name}
endsnippet

snippet "stru?c?t?" "ClassName = Struct .. do .. end" br
${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`} = Struct.new(:${2:attr_names}) do
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "ostru?c?t?" "ClassName = OpenStruct .. do .. end" br
${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`} = OpenStruct.new${2:(:${3:attr_name} => ${4:value})} do
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet app " if __FILE__ == $PROGRAM_NAME " b
if __FILE__ == $PROGRAM_NAME
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "enco?d?i?n?g?" "# encoding: utf-8" br
# encoding: utf-8
$0
endsnippet

snippet @ " @var ||= value " b
@${1:name} ||= ${2:value}
endsnippet

snippet ivc " @var ||= value " b
@${1:name} ||= ${2:value}
endsnippet

snippet "memo?" " @var ||= value " br
@${1:name} ||= ${2:value}
endsnippet

snippet "memo?" " @var ||= begin .. value .. end " br
@${1:name} ||= begin
	${2:${VISUAL:# TODO}}
end
endsnippet

snippet Enum "include Enumerable .." b
include Enumerable

def each(&block)
  ${0}
end
endsnippet

snippet Comp "include Comparable .." b
include Comparable

def <=>(other)
  ${0}
end
endsnippet

snippet # " # => "
# =>
endsnippet

snippet "clas?s?" "class .. end" br
class ${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`}
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "clas?s?" "class .. initialize .. end" br
class ${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`}
	def initialize(${2:args})
		${0:${VISUAL:# TODO}}
	end
end
endsnippet

snippet "clas?s?" "class .. < ParentClass .. initialize .. end" br
class ${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2:ParentClass}
	def initialize(${3:args})
		${0:${VISUAL:# TODO}}
	end
end
endsnippet

snippet "modu?l?e?" "module .. end" br
module ${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`}
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "modu?l?e?"  "module .. module_function .. end" br
module ${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`}
	module_function

	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "modu?l?e?"  "module .. ClassMethods .. end" br
module ${1:`!v substitute(expand('%:t:r'),'\(_\|^\)\(.\)', '\u\2', 'g')`}
  module ClassMethods
	${0:${VISUAL:# TODO}}
  end

  module InstanceMethods

  end

  def self.included(receiver)
    receiver.extend         ClassMethods
    receiver.send :include, InstanceMethods
  end
end
endsnippet

snippet array
Array.new(${1:10}) { |${2:i}| ${0} }
endsnippet

snippet hash
Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${0} }
endsnippet

snippet Dir "Dir.global() { |file| .. }"
Dir.glob(${1:"${2:dir/glob/*}"}) { |${3:file}| ${0} }
endsnippet

snippet Dir  "Dir['..']"
Dir[${1:"${2:dir/glob/*}"}]
endsnippet

snippet Dir "Filename.dirname(__FILE__)"
Filename.dirname(__FILE__)
endsnippet

snippet File "File.new('path/to/file',  'w+') do |file| .. end"
File.open(${1:'${2:file/path}'},  ${3:'w+'}) do |${4:file}|
  ${0:# file.puts 'DATA'}
end
endsnippet

snippet File "File.foreach('path/to/file') do |line| .. end"
File.foreach(${1:'${2:path/to/file}'}) do  |${3:line}|
  ${0:# puts line}
end
endsnippet

snippet %i "%i[a b c] #=> [:a, :b, :c]"
%w[${0:puts words here}]
endsnippet

snippet %I "%R[#{interpolation}] #=> [:a, :b, :c]"
%w[${0:puts words or interpolate here}]
endsnippet

snippet %w "%w[a b c] #=> ['a', 'b', 'c']"
%w[${0:puts words here}]
endsnippet

snippet %W "%W[#{interpolation}] #=> ['a', 'b', 'c']"
%w[${0:puts words or interpolate here}]
endsnippet

snippet "(\S+)\.all" "all? { |${1:e}| ${0} }" r
`!p snip.rv=match.group(1)`.all?${1:(&:${2:method})} { |${3:item}| ${0} }
endsnippet

snippet "(\S+)\.any" "any? { |${1:e}| ${0} }" r
`!p snip.rv=match.group(1)`.any?${1:(&:${2:method})} { |${3:item}| ${0} }
endsnippet

snippet bm "Benchmark.bmbm do |x| ... end" b
require 'benchmark'
Benchmark.bmbm do |x|
  x.report("${1:variant 1}") { $0 }
end
endsnippet

snippet "requ?i?r?e?" "require 'spec_helper'" br
require '${1:spec_helper}'
$0
endsnippet

snippet "(\S+)\.sub" ".sub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.sub(${1:expression}) { ${2:"replace_with"} }
endsnippet

snippet "(\S+)\.gsub" ".gsub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.gsub(${1:expression}) { ${2:"replace_with"} }
endsnippet

snippet "(\S+)\.index" ".index { |item| <block> }" r
`!p snip.rv=match.group(1)`.index { |${1:item}| ${2:block} }
endsnippet

snippet "(\S+)\.Index" ".index do |item| ... end" r
`!p snip.rv=match.group(1)`.index do |${1:item}|
	${0:block}
end
endsnippet

snippet do "do |<key>| ... end" i
do ${1:|${2:args}|}
	${0:${VISUAL:# TODO}}
end
endsnippet

snippet "(\S+)\.time?s?" "..times do ... end" r
`!p snip.rv=match.group(1)`.times do
  ${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each" ".each { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.each { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${2:# TODO} }
endsnippet

snippet "(\S+)\.each" ".each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.tap" ".tap do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.tap do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each_?w(ith)?_?i(ndex)?" ".each_with_index { |<element>,<i>| <block> }" r
`!p snip.rv=match.group(1)`.each_with_index { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}| ${3:# TODO} }$0
endsnippet

snippet "(\S+)\.each_?w(ith)?_?i(ndex)?" ".each_with_index do |<element>,<i>| <block> end" r
`!p snip.rv=match.group(1)`.each_with_index do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each_?p(air)?"  ".each_pair { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.each_pair { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.each_?p(air)?" ".each_pair do |<key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.each_pair do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Map" ".map { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.map { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| $1 }
endsnippet

snippet "(\S+)\.map" ".map do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.map do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	$1
end
endsnippet

snippet "(\S+)\.Merge!" ".merge!(<other_hash>) { |<key>,<oldval>,<newval>| <block> }" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) { |${2:key},${3:oldval},${4:newval}| ${5:block} }
endsnippet

snippet "(\S+)\.merge!" ".merge!(<other_hash>) do |<key>,<oldval>,<newval>| <block> end" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) do |${2:key},${3:oldval},${4:newval}|
	${0:block}
end
endsnippet

snippet "(\S+)\.Keep_?if" ".keep_if { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.keep_if { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.keep_?if" ".keep_if do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.keep_if do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Reject" ".reject { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.reject { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.reject" ".reject do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.reject do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Select" ".select { |<item>| <block>}" r
`!p snip.rv=match.group(1)`.select { |${1:item}| ${2:block} }
endsnippet

snippet "(\S+)\.select" ".select do |<item>| <block> end" r
`!p snip.rv=match.group(1)`.select do |${1:item}|
	${0:block}
end
endsnippet

snippet "(\S+)\.Sort" ".sort { |<a>,<b>| <block> }" r
`!p snip.rv=match.group(1)`.sort { |${1:a},${2:b}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.sort" ".sort do |<a>,<b>| <block> end" r
`!p snip.rv=match.group(1)`.sort do |${1:a},${2:b}|
	${0:# TODO}
end
endsnippet

snippet while "while <expression> ... end"
while ${1:expression}
	${0:# TODO}
end
endsnippet

snippet until "until <expression> ... end"
until ${1:expression}
	${0:# TODO}
end
endsnippet

snippet r "attr_reader :<attr_names>" b
attr_reader :${0:attr_names}
endsnippet

snippet w "attr_writer :<attr_names>" b
attr_writer :${0:attr_names}
endsnippet

snippet rw "attr_accessor :<attr_names>" b
attr_accessor :${0:attr_names}
endsnippet

snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
case ${1:variable}
when ${2:expression}
$0
end
endsnippet

snippet If "<command> if <expression>"
${1:command} if ${0:expression}
endsnippet

snippet if "if <condition> ... end"
if ${1:condition}
	${2:${VISUAL:# TODO}}
end
endsnippet

snippet ife "if <condition> ... else ... end"
if ${1:condition}
	${2:${VISUAL:# TODO}}
else
	${3:# TODO}
end
endsnippet

snippet unless "unless <condition> ... end"
unless ${1:condition}
	${2:${VISUAL:# TODO}}
end
endsnippet

snippet Unless "<command> unless <expression>"
${1:command} unless ${0:expression}
endsnippet

# vim:fen:ft=snippets:fdm=marker:fmr=snippet,endsnippet:fdl=0:fdc=1:ts=2:sw=2:sts=2:nu
